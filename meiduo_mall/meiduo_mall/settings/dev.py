"""
Django settings for meiduo_mall project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'hg4*h4yswt%=a#2rc2_c=zmnj&j4#k(u$#3gbpbg29nx8mzsg1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', '127.0.0.1']

import pymysql

pymysql.install_as_MySQLdb()

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meiduo_mall.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # 配置jinja2
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 配置静态文件路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 补充jinja2 模版引擎环境
            'environment': 'meiduo_mall.utils.jinja2_env.jinja2_env',
        },
    },
    # 注意 需要把 DjangoTemplates模版设置在jinja2模版下面 否则
    # 出现 ERRORS:
    # ?: (admin.E403) A 'django.template.backends.django.DjangoTemplates' instance must be         configured in TEMPLATES in order to use the admin application.

    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

        },
    },

]

WSGI_APPLICATION = 'meiduo_mall.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
sw = "dev"


def getHost():
    if sw == "dev":
        return ["127.0.0.1", "root"]
    elif sw == "test":
        return ["127.0.0.1", "root"]
    elif sw == "pro":
        return ["127.0.0.1", "root"]


# mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'meiduo',
        'USER': 'meiduo',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'OPTIONS': {
            # 'init_command': 'SET sql_mode="STRICT_TRANS_TABLES"',
            # "init_command": "SET foreign_key_checks = 0;",
            'charset': 'utf8mb4'
        }
    }
}
'''
 create database meiduo charset=utf8;
 create user meiduo identified by '123456';
 grant all on  meiduo.* to 'meiduo'@'%';
 flush privileges;
'''

# redis 分库
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:63180/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "PASSWORD": "loadtest",
        },
        # 前缀
        # "KEY_PREFIX": "test_platform"
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:63180/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "PASSWORD": "loadtest",
        },
        # 前缀
        # "KEY_PREFIX": "test_platform"
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"  # default|session

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 指定加载静态路由的前缀
STATIC_URL = '/static/'
# 配置静态文件的加载路径
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]

# http://127.0.0.1/static/images/adv01.jpg

# 下面就是logging的配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息的显示格式
        'verbose': {
            'format': '%(asctime)s %(levelname)-8s %(filename)s %(funcName)s[line:%(lineno)d] %(message)s',
            # 'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(asctime)s %(levelname)-8s %(pathname)s %(funcName)s[line:%(lineno)d] %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才能输出日志
            '{}': 'django.utils.log.RequireDebugTrue',
        },
    },

    'handlers': {  # 日志处理的方法
        # 标准输出
        'console': {  # 向终端中输出日志
            'level': 'INFO',  # DEBUG | INFO
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',  # standard | simple
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',  # DEBUG ｜INFO
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), 'logs/meiduo.log'),  # 日志文件的位置
            'maxBytes': 1024 * 1024 * 50,  # 50 MB
            'backupCount': 10,
            'formatter': 'verbose',  # standard |verbose
        },

        # 'standard': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': logFileName,
        #     'maxBytes': 1024 * 1024 * 100,  # 100 MB
        #     'backupCount': 5,
        #     # 每天凌晨切分
        #     # 'when': 'MIDNIGHT',
        #     'formatter': 'standard',
        # },
        # 'standard_openapi': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': logFileOpenApi,
        #     'maxBytes': 1024 * 1024 * 50,  # 50 MB
        #     'backupCount': 5,
        #     'formatter': 'detail',
        # },
        # 'statistical': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': logFileStatistical,
        #     'maxBytes': 1024 * 1024 * 50,  # 50 MB
        #     'backupCount': 5,
        #     'formatter': 'detail',
        # },
        # 'task': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': logFileTask,
        #     'maxBytes': 1024 * 1024 * 50,  # 50 MB
        #     'backupCount': 5,
        #     'formatter': 'detail',
        # },
        # 'cluster': {
        #     'level': 'DEBUG',
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': logFileCluster,
        #     'maxBytes': 1024 * 1024 * 50,  # 50 MB
        #     'backupCount': 5,
        #     'formatter': 'detail',
        # },

    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'level': 'INFO',  # 这里配置django本身日志等级
            'propagate': True,
        },
        # # 自定义模块日志
        # 'django.template': {
        #     'handlers': ['file'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'test_platform': {
        #     'handlers': ['console', 'standard'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'test_frame': {
        #     'handlers': ['console', 'standard'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        #
        # 'customAuth': {
        #     'handlers': ['console', 'standard'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'rest_framework': {
        #     'handlers': ['console', 'standard'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'test_tools': {
        #     'handlers': ['console', 'standard'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'open_api': {
        #     'handlers': ['console', 'standard_openapi'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'statistical': {
        #     'handlers': ['console', 'statistical'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'task': {
        #     'handlers': ['console', 'task'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
        # 'cluster': {
        #     'handlers': ['console', 'cluster'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
    },
}
